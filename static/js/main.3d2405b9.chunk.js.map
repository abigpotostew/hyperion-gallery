{"version":3,"sources":["components/header.tsx","config.ts","utils/keplr-testnet.ts","utils/keplr-client.ts","service/query.ts","hooks/useQueryContract.ts","components/token-frame.tsx","components/random-token.tsx","hooks/useQueryParam.ts","components/token.tsx","components/gallery.tsx","components/paged-gallery.tsx","components/all-minted-gallery.tsx","App.tsx","routes/token-one.tsx","components/wallet.tsx","routes/wallet-route.tsx","index.tsx"],"names":["Header","Navbar","bg","expand","Container","Brand","href","className","Toggle","Nav","Link","style","configBase","testnet","rpcEndpoint","restEndpoint","chainId","sg721","minter","mintPriceStars","totalNumMints","thumbFiletype","metadataType","rarityType","fileBase","fileUrlThumbnails","fileUrlMetadata","fileUrlRarities","production","useTestnet","config","Object","freeze","testnetConfig","rpc","rest","chainName","bech32Config","mainPrefix","validatorPrefix","consensusPrefix","publicPrefix","operatorPrefix","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","defaultBech32Config","bip44","coinType","stakeCurrency","coinDenom","coinMinimalDenom","coinDecimals","coinGeckoId","coinImageUrl","nativeCurrency","currencies","feeCurrencies","features","chainSymbolImageUrl","txExplorer","name","txUrl","addTestnetToKeplr","a","windowKeplr","keplr","enable","experimentalSuggestChain","window","client","prefix","Promise","r","setTimeout","checkChainOrTestnet","getOfflineSignerAuto","offlineSigner","SigningCosmWasmClient","connectWithSigner","signer","Error","QueryContract","keplrClient","keplerOfflineClient","this","address","getBalance","allTokens","limit","start_after","queryContractSmart","tokens","owner","page","length","push","map","t","parseInt","sort","toString","props","all_tokens","ownedTokens","num_tokens","count","accounts","getAccounts","CosmWasmClient","connect","useQueryContract","useState","undefined","queryClient","setQueryClient","useEffect","init","TokenFrame","tokenId","allow","allowFullScreen","frameBorder","height","sandbox","src","width","RandomToken","numTokens","setNumTokens","setTokenId","getNumberTokensTotal","num","Math","floor","random","useQueryParam","key","useSearchParams","searchParams","setSearchParams","paramValue","get","useMemo","useCallback","newValue","options","newSearchParams","URLSearchParams","set","Token","token","live","imageUrl","imageUrl4k","thumbnail","tokenDetails","Card","Img","variant","Body","Title","Text","to","Gallery","tokenIds","Col","xs","md","lg","PagedGallery","totalNumTokens","setPage","pageNum","pages","j","i","from","Row","Pagination","First","Prev","Item","active","onClick","e","changePage","Next","Last","AllMintedGallery","App","TokenOne","query","location","search","padding","Wallet","setTokenIds","accountQueryParam","setAccountQueryParam","account","console","log","balance","getAllOwnedTokens","onConnectKeplr","connectKeplr","Button","WalletRoute","ReactDOM","render","StrictMode","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.3d2405b9.chunk.js","sourcesContent":["import { Nav, Navbar, NavDropdown } from \"react-bootstrap\";\nimport Container from \"react-bootstrap/Container\";\nimport './header.css'\n\nexport const Header = () => {\n  return (<><Navbar bg=\"white\" expand=\"lg\">\n    <Container>\n\n          <Navbar.Brand href=\"/\">\n            {/*<img*/}\n            {/*  alt=\"\"*/}\n            {/*  src=\"/logo.jpg\"*/}\n            {/*  width=\"50\"*/}\n            {/*  height=\"50\"*/}\n            {/*  className=\"d-inline-block align-top\"*/}\n            {/*/>{' '}*/}\n            <div className={'Header-title-container'}>\n            <h2 className={'Header-title'}>Hyperion</h2>\n              <h3 className={'Header-subtitle'}>on Stargaze</h3>\n            </div>\n\n          </Navbar.Brand>\n\n      {/*<Navbar.Brand href=\"#home\">Hyperion</Navbar.Brand>*/}\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n\n        <Nav className=\"me-auto\">\n          <Nav.Link href=\"/gallery\">Gallery</Nav.Link>\n          <Nav.Link href=\"/wallet\">My NFTs</Nav.Link>\n        </Nav>\n\n    </Container>\n\n\n  </Navbar>\n  < hr style={{'color':'black'}} />\n   </>)\n}\n","\nconst configBase = {\n  // Testnet values\n  testnet: {\n    rpcEndpoint: \"https://rpc.big-bang-1.stargaze-apis.com/\",\n    restEndpoint: \"https://rest.big-bang-1.stargaze-apis.com/\",\n    chainId: \"big-bang-1\",\n    // Custom values here\n    sg721: \"stars1msfmkx4xmts3el3r46c2u2eehxkhahqzsa0crn0v58cncp7ztr7qrshkkh\", // UPDATE ME to your testnet contract\n    minter: \"stars1944la2whlrumpc80nhghr75djrz8pmk3ddufktp9087spssq2rwqnp57my\", // UPDATE ME to your testnet contract\n    mintPriceStars: 350, // UPDATE ME to Your Mint Price\n    totalNumMints: 1024, // UPDATE ME to Your total mints\n    thumbFiletype: \".jpg\", // UPDATE ME to Your total mints\n    metadataType: \".json\", // UPDATE ME to Your total mints\n    rarityType: \".json\", // UPDATE ME to Your total mints\n    fileBase: \"https://files.endala.xyz/\",\n    fileUrlThumbnails: \"https://files.endala.xyz/testnet/thumbnails\", // I am hosting cached versions on S3 because its much faster\n    fileUrlMetadata: \"https://files.endala.xyz/testnet/metadata\",\n    fileUrlRarities: \"https://files.endala.xyz/testnet/rarities\",\n    testnet:true,\n  },\n  // Production Values\n  production: {\n    rpcEndpoint: \"https://rpc-stargaze.keplr.app\",\n    restEndpoint: \"https://lcd-stargaze.keplr.app\",\n    chainId: \"stargaze-1\",\n    // Custom values here\n    sg721: \"stars1msfmkx4xmts3el3r46c2u2eehxkhahqzsa0crn0v58cncp7ztr7qrshkkh\", // UPDATE ME to your production contract\n    minter: \"stars1944la2whlrumpc80nhghr75djrz8pmk3ddufktp9087spssq2rwqnp57my\", // UPDATE ME to your production contract\n    mintPriceStars: 200, // UPDATE ME to Your Mint Price\n    totalNumMints: 641, // UPDATE ME to Your total mints\n    thumbFiletype: \".jpg\", // UPDATE ME to Your total mints\n    metadataType: \".json\", // UPDATE ME to Your total mints\n    rarityType: \".json\", // UPDATE ME to Your total mints\n    fileBase: \"https://files.endala.xyz/\",\n    fileUrlThumbnails: \"https://files.endala.xyz/testnet/thumbnails\",\n    fileUrlMetadata: \"https://files.endala.xyz/testnet/metadata\",\n    fileUrlRarities: \"https://files.endala.xyz/testnet/rarities\",\n    testnet:false,\n  },\n  useTestnet: true, // Set to false on production\n};\n\nexport type Config = typeof configBase.testnet | typeof configBase.production;\n\nconst config = configBase.useTestnet\n  ? configBase.testnet\n  : configBase.production;\nconfig.testnet = configBase.useTestnet;\nObject.freeze(config);\n\nexport default config;\n","import { windowKeplr } from \"./keplr-client\";\n\nconst defaultBech32Config = (\n  mainPrefix:string,\n  validatorPrefix = \"val\",\n  consensusPrefix = \"cons\",\n  publicPrefix = \"pub\",\n  operatorPrefix = \"oper\"\n) => {\n  return {\n    bech32PrefixAccAddr: mainPrefix,\n    bech32PrefixAccPub: mainPrefix + publicPrefix,\n    bech32PrefixValAddr: mainPrefix + validatorPrefix + operatorPrefix,\n    bech32PrefixValPub:\n      mainPrefix + validatorPrefix + operatorPrefix + publicPrefix,\n    bech32PrefixConsAddr: mainPrefix + validatorPrefix + consensusPrefix,\n    bech32PrefixConsPub:\n      mainPrefix + validatorPrefix + consensusPrefix + publicPrefix,\n  };\n};\n\nconst testnetConfig = {\n  chainId: \"big-bang-1\",\n  rpc: \"https://rpc.big-bang-1.stargaze-apis.com/\",\n  rest: \"https://rest.big-bang-1.stargaze-apis.com/\",\n  chainName: \"Stargaze Test\",\n  bech32Config: defaultBech32Config(\"stars\"),\n  bip44: {\n    coinType: 118,\n  },\n  stakeCurrency: {\n    coinDenom: \"STARS\",\n    coinMinimalDenom: \"ustars\",\n    coinDecimals: 6,\n    coinGeckoId: \"stargaze\",\n    coinImageUrl: \"https://dhj8dql1kzq2v.cloudfront.net/white/stargaze.png\",\n  },\n  nativeCurrency: \"STARS\",\n  currencies: [\n    {\n      coinDenom: \"STARS\",\n      coinMinimalDenom: \"ustars\",\n      coinDecimals: 6,\n      coinGeckoId: \"stargaze\",\n      coinImageUrl: \"https://dhj8dql1kzq2v.cloudfront.net/white/stargaze.png\",\n    },\n  ],\n  feeCurrencies: [\n    {\n      coinDenom: \"STARS\",\n      coinMinimalDenom: \"ustars\",\n      coinDecimals: 6,\n      coinGeckoId: \"stargaze\",\n      coinImageUrl: \"https://dhj8dql1kzq2v.cloudfront.net/white/stargaze.png\",\n    },\n  ],\n  features: [\"stargate\", \"no-legacy-stdTx\", \"ibc-transfer\", \"ibc-go\"],\n  chainSymbolImageUrl:\n    \"https://dhj8dql1kzq2v.cloudfront.net/white/stargaze.png\",\n  txExplorer: {\n    name: \"TestScan\",\n    txUrl: \"http://38.242.223.192/big-bang-1/tx/{txHash}\",\n  },\n};\n\nconst addTestnetToKeplr = async () => {\n  let client;\n  if (windowKeplr.keplr) {\n    try {\n      await windowKeplr.keplr.enable(testnetConfig.chainId);\n    } catch (e) {\n      await windowKeplr.keplr.experimentalSuggestChain(testnetConfig);\n    }\n  }\n};\n\nexport { addTestnetToKeplr };\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { Config } from \"../config\";\nimport { addTestnetToKeplr } from \"./keplr-testnet\";\nimport { Window } from \"@keplr-wallet/types/build/window\";\nimport { GasPrice } from \"@cosmjs/stargate\";\n\nexport const windowKeplr = (<Window>window);\n\nconst client = async (config: Config) => {\n  const prefix = \"wasm\";\n  const gasPrice = null;\n\n  // hack foo to wait for keplr to be available\n  await new Promise((r) => setTimeout(r, 200));\n\n  // check browser compatibility\n\n  const checkChainOrTestnet = async () => {\n    if (config.testnet) {\n      const testnet = await addTestnetToKeplr();\n    } else {\n      const chain = await windowKeplr.keplr?.enable(config.chainId);\n    }\n  };\n\n  await checkChainOrTestnet();\n\n  if (windowKeplr.getOfflineSignerAuto) {\n    // Setup signer\n    const offlineSigner = await windowKeplr.getOfflineSignerAuto(config.chainId);\n    // Init SigningCosmWasmClient client\n    return {\n      signer: await SigningCosmWasmClient.connectWithSigner(\n        config.rpcEndpoint,\n        offlineSigner,\n        {\n          prefix,\n          // gasPrice:new GasPrice(0),\n        }\n      ),\n      offlineSigner,\n    };\n  } else {\n    throw Error(\"Keplr not available\");\n  }\n};\n\nexport default client;\n","import config, { Config } from \"../config\";\nimport { CosmWasmClient, SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport keplrClient from \"../utils/keplr-client\";\nimport { OfflineDirectSigner, OfflineSigner } from \"@cosmjs/proto-signing\";\n\nexport class QueryContract {\n  private readonly config: Config;\n  private readonly client: CosmWasmClient;\n  private keplrClient: SigningCosmWasmClient | undefined;\n  private keplerOfflineClient: OfflineSigner | OfflineDirectSigner | undefined;\n\n  constructor(config: Config, client: CosmWasmClient) {\n    this.config = config;\n    this.client = client;\n  }\n\n  public static async init(config: Config) {\n    const client = await CosmWasmClient.connect(config.rpcEndpoint);\n    return new QueryContract(config, client);\n  }\n\n  async getBalance(address: string) {\n    return this.client.getBalance(address, 'ustars');\n  }\n\n  async getAllOwnedTokens(address: string) {\n    let allTokens: string[] = [];\n\n    const limit = 30;\n    let start_after = '0';\n    while (1) {\n      // let start_after = (i * limit).toString()\n      const page = await this.client.queryContractSmart(this.config.sg721, {\n        tokens: {\n          owner: address,\n          start_after,\n          limit\n        }\n      });\n      if (!page || !page.tokens || page.tokens.length === 0) {\n        break;\n      }\n      start_after = page.tokens[page.tokens.length - 1];\n      allTokens.push(...page.tokens as string[]);\n    }\n\n    return allTokens.map(t => parseInt(t)).sort().map(t => t.toString());\n  }\n\n  // probably don't need this, it returns tokens in lexographic order\n  async getAllTokens({ limit = 30, start_after = '0' }: { limit?: number, start_after?: string }) {\n    const props = { limit, start_after };\n    const ownedTokens = await this.client.queryContractSmart(this.config.sg721, { all_tokens: props });\n    return ownedTokens.tokens as string[];\n  }\n\n  async getNumberTokensTotal() {\n    const num_tokens = await this.client.queryContractSmart(this.config.sg721, { num_tokens: {} });\n    return num_tokens.count as number;\n  }\n\n  async getAccounts() {\n    if (this.keplerOfflineClient) {\n      const accounts = this.keplerOfflineClient.getAccounts();\n      return accounts\n    } else {\n      throw new Error('Kepler Offline Client not initialized')\n    }\n  }\n\n  async connectKeplr() {\n    if (this.keplrClient) {\n      return;\n    }\n    const { signer, offlineSigner } = await keplrClient(config);\n    this.keplrClient = signer;\n    this.keplerOfflineClient = offlineSigner;\n  }\n}\n","import { useEffect, useState } from \"react\";\nimport config from \"../config\";\nimport { QueryContract } from \"../service/query\";\nimport { AccountData } from \"@cosmjs/proto-signing\";\n\nexport const useQueryContract = () => {\n  const [queryClient, setQueryClient] = useState<QueryContract | undefined>(undefined);\n  useEffect(() => {\n    (async () => {\n      const queryClient = await QueryContract.init(config);\n      setQueryClient(queryClient);\n    })();\n  }, [])\n  return { queryClient };\n}\n\nexport const useAccounts = () => {\n  const { queryClient } = useQueryContract();\n  const [accounts, setAccounts] = useState<readonly AccountData[] | undefined>(undefined);\n  useEffect(() => {\n    if (!queryClient || accounts !== undefined) {\n      return;\n    }\n    (async () => {\n      await queryClient.connectKeplr()\n      const accounts = await queryClient.getAccounts()\n      setAccounts(accounts)\n    })();\n  }, [queryClient])\n  return { accounts }\n}\n","import Container from \"react-bootstrap/Container\";\nimport { Col, Row } from \"react-bootstrap\";\n\nexport const TokenFrame = ({tokenId}:{tokenId:string})=>{\n  return (\n\n      <iframe allow={\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture;\"} allowFullScreen frameBorder={\"0\"}\n              height={\"100%\"} sandbox={\"allow-scripts\"} src={`https://hyperion.stewart.codes/gen/${tokenId}/`} width={\"100%\"}\n              style={{ \"minHeight\": 525  }}></iframe>\n\n  )\n}\n","import { useQueryContract } from \"../hooks/useQueryContract\";\nimport { useEffect, useState } from \"react\";\nimport { TokenFrame } from \"./token-frame\";\n\nexport const RandomToken = ()=>{\n  const [numTokens, setNumTokens] = useState(0);\n  const [tokenId, setTokenId] = useState<string>(\"0\");\n\n  const {queryClient}=useQueryContract()\n  useEffect(()=>{\n    if(!queryClient)return;\n\n    (async()=>{\n      const num = await queryClient.getNumberTokensTotal()\n      setNumTokens(num)\n      if(num===0){\n        setTokenId(\"1\")\n      }else{\n        setTokenId((Math.floor(Math.random()*num)+1).toString())\n      }\n    })()\n  },[queryClient])\n\n  return (\n    <>\n    {tokenId==='0'?\"Loading...\":\n      <>\n        <TokenFrame tokenId={tokenId}/>\n        Showing token {tokenId} of {numTokens}\n      </>\n    }\n    </>\n  )\n}\n","/**\n * This custom hook is a wrapper around `useSearchParams()` that parses and\n * serializes the search param value using the JSURL library, which permits any\n * JavaScript value to be safely URL-encoded.\n *\n * It's a good example of how React hooks offer a great deal of flexibility when\n * you compose them together!\n *\n * TODO: rethink the generic type here, users can put whatever they want in the\n * URL, probably best to use runtime validation with a type predicate:\n * https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates\n */\nimport { NavigateOptions } from \"react-router\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { useCallback, useMemo } from \"react\";\n\nexport function useQueryParam(\n  key: string\n): [string | undefined, (newQuery: string, options?: NavigateOptions) => void] {\n  let [searchParams, setSearchParams] = useSearchParams();\n  let paramValue = searchParams.get(key) || undefined;\n\n  let value = useMemo(() => paramValue, [paramValue]);\n\n  let setValue = useCallback(\n    (newValue: string, options?: NavigateOptions) => {\n      let newSearchParams = new URLSearchParams(searchParams);\n      // @ts-ignore\n      newSearchParams.set(key, newValue);\n      setSearchParams(newSearchParams, options);\n    },\n    [key, searchParams, setSearchParams]\n  );\n\n  return [value, setValue];\n}\n","import { Card } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport './token.css';\n\nexport const tokenDetails = (tokenId:string)=>{\n  return {\n    live: `https://hyperion.stewart.codes/gen/${tokenId}/`,\n    imageUrl: `https://ipfs.io/ipfs/bafybeiaqkwid7mhfocnrizk3rfwqjm6o2s2o6teewoyite3upmifqdjrye/${tokenId}.jpg`,\n    imageUrl4k: `https://ipfs.io/ipfs/bafybeiaqkwid7mhfocnrizk3rfwqjm6o2s2o6teewoyite3upmifqdjrye/${tokenId}.png`,\n    thumbnail: `https://hyperion-images-stargaze.s3.us-west-1.amazonaws.com/thumbs-300/${tokenId}.jpg`,\n  }\n}\n\nexport const Token = ({tokenId}:{tokenId:string})=>{\n\n  const token = tokenDetails(tokenId);\n\n  return (\n          <Card className=\"text-center\">\n            <Card.Img variant=\"top\" src={token.thumbnail} />\n            <Card.Body>\n              <Card.Title>#{tokenId}</Card.Title>\n              <Card.Text>\n                <a href={token.live} className={'Token-link'} >Live</a> |{\" \"}\n                <a href={token.imageUrl4k} className={'Token-link'} >Image</a> |{\" \"}\n                <Link to={`/token?id=${tokenId}`} className={'Token-link'} >Details</Link>\n              </Card.Text>\n            </Card.Body>\n          </Card>\n\n  )\n}\n","import Container from \"react-bootstrap/Container\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { Token } from \"./token\";\nimport './gallery.css';\n\nfunction splitArrayIntoChunksOfLen(arr:any[], len:number) {\n  var chunks = [], i = 0, n = arr.length;\n  while (i < n) {\n    chunks.push(arr.slice(i, i += len));\n  }\n  return chunks;\n}\nexport const Gallery = ({ tokenIds }: { tokenIds: string[] }) => {\n\n  return (\n<>\n          {tokenIds.map((tokenId:string) => (\n            <Col xs={12} md={6} lg={4} key={tokenId} className={'Gallery-item'}>\n              <Token tokenId={tokenId} />\n            </Col>\n          ))}\n</>\n    // <Container >\n    //   {chunks.map((chunk, index) => (\n    //     <Row  key={index}>\n    //       {chunk.map((tokenId:string) => (\n    //         <Col xs={12} md={6} lg={4} key={tokenId}>\n    //           <Token tokenId={tokenId} />\n    //         </Col>\n    //       ))}\n    //     </Row>\n    //   ))}\n    // </Container>\n  )\n}\n","import Container from \"react-bootstrap/Container\";\nimport { Col, Pagination, Row } from \"react-bootstrap\";\nimport { Token } from \"./token\";\nimport './gallery.css';\nimport { useQueryParam } from \"../hooks/useQueryParam\";\nimport { useMemo } from \"react\";\nimport { Gallery } from \"./gallery\";\n\nexport const PagedGallery = ({ totalNumTokens }: { totalNumTokens: number }) => {\n  let [page, setPage] = useQueryParam('page');\n  const pageNum = parseInt(page||'1')\n  const limit = 30;\n  const pages = useMemo(() => {\n    const pages = [];\n    let j=1;\n    for (let i = 0; i < totalNumTokens; i += limit) {\n      pages.push(j++);\n    }\n    return pages;\n  }, [totalNumTokens]);\n  const tokenIds = useMemo(() => {\n    const tokenIds = [];\n    const from = (parseInt(page || '1')-1)*limit+1;\n    const to = from + limit;\n    for (let i = from; i <= to; i++) {\n      tokenIds.push(i.toString());\n    }\n    return tokenIds;\n  }, [totalNumTokens]);\n\n  const changePage = (page: number) => {\n    setPage(page.toString());\n    // update whatever\n  }\n\n  return (\n    <Container >\n      <Row>\n      <Gallery tokenIds={tokenIds} />\n      </Row>\n      <Row>\n        <Pagination>\n          <Pagination.First />\n          <Pagination.Prev />\n          {pages.map((page:number) => (\n            <Pagination.Item key={page} active={page === pageNum} onClick={(e) => changePage(page)}>\n              {page}\n            </Pagination.Item>\n          ))}\n          <Pagination.Next />\n          <Pagination.Last />\n        </Pagination>\n      </Row>\n    </Container>\n    // <Container >\n    //   {chunks.map((chunk, index) => (\n    //     <Row  key={index}>\n    //       {chunk.map((tokenId:string) => (\n    //         <Col xs={12} md={6} lg={4} key={tokenId}>\n    //           <Token tokenId={tokenId} />\n    //         </Col>\n    //       ))}\n    //     </Row>\n    //   ))}\n    // </Container>\n  )\n}\n","import { useEffect, useState } from \"react\";\nimport { useQueryContract } from \"../hooks/useQueryContract\";\nimport { Gallery } from \"./gallery\";\nimport { PagedGallery } from \"./paged-gallery\";\n\nexport const AllMintedGallery = ()=>{\n  const [numTokens, setNumTokens] = useState<number|undefined>(undefined);\n  const {queryClient}=useQueryContract()\n\n  useEffect(()=>{\n    if(!queryClient)return;\n    (async()=>{\n      const num = await queryClient.getNumberTokensTotal()\n      setNumTokens(num)\n    })()\n  },[queryClient])\n\n  return (\n    <div>\n      <h2>All Minted Tokens</h2>\n      <p>\n        This is a list of all the tokens that have been minted.\n      </p>\n      <p>\n        <b>{numTokens}</b> tokens have been minted.\n      </p>\n      {numTokens?<PagedGallery totalNumTokens={numTokens} />:<p>Loading...</p>}\n    </div>\n  );\n\n\n}\n","import React from 'react';\nimport logo from './banner.png';\nimport './App.css';\nimport { Link } from \"react-router-dom\";\nimport { Header } from \"./components/header\";\nimport { RandomToken } from \"./components/random-token\";\nimport { AllMintedGallery } from \"./components/all-minted-gallery\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <RandomToken />\n      <AllMintedGallery />\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\nimport { Token } from \"../components/token\";\nimport { TokenFrame } from \"../components/token-frame\";\n\nexport default function TokenOne() {\n  const [tokenId, setTokenId] = useState<string>('')\n  useEffect(()=>{\n    const query = new URLSearchParams(window.location.search)\n   if(query.get('token')){\n      const tokenId = parseInt(query.get('token')||'0')\n      if(tokenId>0&&tokenId<=1024){\n        setTokenId(tokenId.toString())\n      }\n    }\n  },[])\n\n  return (\n    <main style={{ padding: \"1rem 0\" }}>\n  <h2>Tokens</h2>\n      {tokenId && <TokenFrame tokenId={tokenId}/>}\n      {tokenId && <Token tokenId={tokenId}/>}\n  </main>\n);\n}\n","import Container from \"react-bootstrap/Container\";\nimport { useEffect, useState } from \"react\";\nimport { Gallery } from \"./gallery\";\nimport { useAccounts, useQueryContract } from \"../hooks/useQueryContract\";\nimport { Button } from \"react-bootstrap\";\nimport { AccountData } from \"@cosmjs/proto-signing\";\nimport { useQueryParam } from \"../hooks/useQueryParam\";\n\nexport const Wallet = () => {\n  const { queryClient } = useQueryContract()\n  const [tokenIds, setTokenIds] = useState<string[]>([]);\n  let [accountQueryParam, setAccountQueryParam] = useQueryParam('account');\n\n  useEffect(() => {\n    if (!queryClient || !accountQueryParam) {\n      return;\n    }\n\n    (async () => {\n      let account = accountQueryParam;\n      setAccountQueryParam(account);\n      console.log(account)\n      const balance = await queryClient.getBalance(account);\n      console.log(account, 'account balance:', balance);\n\n      const ownedTokens = await queryClient.getAllOwnedTokens(account)\n      console.log(account, 'owned tokens:', ownedTokens);\n      setTokenIds(ownedTokens)\n\n    })()\n\n  }, [queryClient, accountQueryParam])\n\n  const onConnectKeplr = async ()=>{\n    if (!queryClient ) {\n      return;\n    }\n    await queryClient.connectKeplr()\n    const accounts = await queryClient.getAccounts()\n    if(accounts.length>0){\n      setAccountQueryParam(accounts[0].address)\n    }\n  }\n\n  return (\n    <Container >\n      <Button variant=\"primary\" onClick={onConnectKeplr}>Connect Keplr</Button>\n      <Gallery tokenIds={tokenIds}/>\n    </Container>\n  )\n}\n","import { Wallet } from \"../components/wallet\";\nimport { Header } from \"../components/header\";\n\nexport default function WalletRoute() {\n  return (\n    <>\n      <Header />\n      <main style={{ padding: \"1rem 0\" }}>\n        <h2>My NFTs</h2>\n        <Wallet />\n      </main>\n    </>\n);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\nimport App from \"./App\";\nimport TokenOne from \"./routes/token-one\";\nimport WalletRoute from \"./routes/wallet-route\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<App />} />\n        <Route path=\"/token\" element={<TokenOne />} />\n        <Route path=\"/wallet\" element={<WalletRoute />} />\n      </Routes>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}